


ARM Macro Assembler    Page 1 


    1 00000000         ; ------------------------------------------------------
                       ------------
    2 00000000         ; --  _____       ______  _____                         
                                  -
    3 00000000         ; -- |_   _|     |  ____|/ ____|                        
                                  -
    4 00000000         ; --   | |  _ __ | |__  | (___    Institute of Embedded 
                       Systems    -
    5 00000000         ; --   | | | '_ \|  __|  \___ \   Zurich University of  
                                  -
    6 00000000         ; --  _| |_| | | | |____ ____) |  Applied Sciences      
                                  -
    7 00000000         ; -- |_____|_| |_|______|_____/   8401 Winterthur, Switz
                       erland     -
    8 00000000         ; ------------------------------------------------------
                       ------------
    9 00000000         ; --
   10 00000000         ; -- main.s
   11 00000000         ; --
   12 00000000         ; -- CT1 P06 "ALU und Sprungbefehle" mit MUL
   13 00000000         ; --
   14 00000000         ; -- $Id: main.s 3728 2016-10-24 07:59:17Z kesr $
   15 00000000         ; ------------------------------------------------------
                       ------------
   16 00000000         ;Directives
   17 00000000                 PRESERVE8
   18 00000000                 THUMB
   19 00000000         
   20 00000000         ; ------------------------------------------------------
                       ------------
   21 00000000         ; -- Address Defines
   22 00000000         ; ------------------------------------------------------
                       ------------
   23 00000000         
   24 00000000 60000100 
                       ADDR_LED_15_0
                               EQU              0x60000100
   25 00000000 60000102 
                       ADDR_LED_31_16
                               EQU              0x60000102
   26 00000000 60000200 
                       ADDR_DIP_SWITCH_7_0
                               EQU              0x60000200
   27 00000000 60000201 
                       ADDR_DIP_SWITCH_15_8
                               EQU              0x60000201
   28 00000000 60000114 
                       ADDR_7_SEG_BIN_DS3_0
                               EQU              0x60000114
   29 00000000 60000210 
                       ADDR_BUTTONS
                               EQU              0x60000210
   30 00000000         
   31 00000000 60000340 
                       ADDR_LCD_RED
                               EQU              0x60000340
   32 00000000 60000342 
                       ADDR_LCD_GREEN
                               EQU              0x60000342



ARM Macro Assembler    Page 2 


   33 00000000 60000344 
                       ADDR_LCD_BLUE
                               EQU              0x60000344
   34 00000000 0000FFFF 
                       LCD_BACKLIGHT_FULL
                               EQU              0xffff
   35 00000000 00000000 
                       LCD_BACKLIGHT_OFF
                               EQU              0x0000
   36 00000000         
   37 00000000 0000000F 
                       BITMASK_LOWER_4
                               EQU              0x0F
   38 00000000 00000001 
                       BITMASK_LASTBIT
                               EQU              0x00000001
   39 00000000         ; ------------------------------------------------------
                       ------------
   40 00000000         ; -- myCode
   41 00000000         ; ------------------------------------------------------
                       ------------
   42 00000000                 AREA             myCode, CODE, READONLY
   43 00000000         
   44 00000000                 ENTRY
   45 00000000         
   46 00000000         main    PROC
   47 00000000                 export           main
   48 00000000         
   49 00000000         ; INTRODUCTION FOR TASK 3.1
   50 00000000         ; Switches 0 - 3 contain the ones
   51 00000000         ; Switches 8 - 11 contain the tens
   52 00000000         ; Combined value shall be display as BCD on LED 0 - 7
   53 00000000         ; BCD value shall be display on the 7segment (0-1) 
   54 00000000         ; HEX value shall be display on the 7segment (2-3)
   55 00000000         ; Combined value shall be display as binary on LED 8 -15
                       
   56 00000000         
   57 00000000         ; STUDENTS: To be programmed
   58 00000000         
   59 00000000         ; ********************
   60 00000000         ; ***** TASK 3.1 *****
   61 00000000         ; ********************
   62 00000000         
   63 00000000         ; --- BitMask lower 4 Bits in R7 ---
   64 00000000         ; Load addres of Bitmask to R7
   65 00000000 4F25            LDR              R7, =BITMASK_LOWER_4
   66 00000002         
   67 00000002         ; --- BCD Ones in R1 ---
   68 00000002         
   69 00000002         ; load address of switches 0-7 (BCD-Ones)
   70 00000002 4826            LDR              R0, =ADDR_DIP_SWITCH_7_0
   71 00000004         ; read value of switches 0-7 (BCD-Ones)
   72 00000004 7801            LDRB             R1, [R0]
   73 00000006         ; mask the upper 4 bits
   74 00000006 4039            ANDS             R1, R7
   75 00000008         
   76 00000008         ; --- BCD Tens in R2 --- 
   77 00000008         
   78 00000008         ; load address of switches 8-15



ARM Macro Assembler    Page 3 


   79 00000008 4825            LDR              R0, =ADDR_DIP_SWITCH_15_8
   80 0000000A         ; read value of switches 8-15
   81 0000000A 7802            LDRB             R2, [R0]
   82 0000000C         ; mask the upper 4 bits
   83 0000000C 403A            ANDS             R2, R7
   84 0000000E         
   85 0000000E         ; --- create combined BCD value in R3 ---
   86 0000000E         ; that we can combine the BCD value, we can combined the
                       m with ADD - but first we have to shift the BCD-tens
   87 0000000E         
   88 0000000E         ; Left shift the tens
   89 0000000E 0112            LSLS             R2, R2, #4
   90 00000010         ; combine ones (R1) and tens(R2) and store it to R3
   91 00000010 1853            ADDS             R3, R2, R1
   92 00000012         ; remove the shift by bcd-tens
   93 00000012 0912            LSRS             R2, R2, #4
   94 00000014         
   95 00000014         ; --- BitMask last bit in R7 ---
   96 00000014 4F23            LDR              R7, =BITMASK_LASTBIT
   97 00000016         
   98 00000016         ; --- Button T0 ---
   99 00000016         ; Load address from Buttons in R4
  100 00000016 4C24            LDR              R4, =ADDR_BUTTONS
  101 00000018         ; Read value of Buttons in R5
  102 00000018 7825            LDRB             R5, [R4]
  103 0000001A         
  104 0000001A         ; Test if lastbit is set with TST
  105 0000001A         ; TST does the same as ANDS, but do not replace the resu
                       lt
  106 0000001A 423D            TST              R5, R7
  107 0000001C         
  108 0000001C         ; if is not equal change to another branch -> use_shift_
                       add
  109 0000001C         ; else use muls
  110 0000001C D103            BNE              shifting
  111 0000001E         
  112 0000001E         ; --- Multiplication ---
  113 0000001E         ; load value (10) for multiplication
  114 0000001E 4C23            LDR              R4, =10
  115 00000020         ; Multiplication by 10 -> tens-value (R2)
  116 00000020 4354            MULS             R4, R2, R4
  117 00000022         ; Addition ones-value (R1) to the multiplicated result
  118 00000022 1864            ADDS             R4, R4, R1
  119 00000024         
  120 00000024         ; Go to blue_lcd-Branch
  121 00000024 E004            B                blue_light
  122 00000026         
  123 00000026         
  124 00000026         shifting
  125 00000026         ; move value of tens to R4, so we don't lose the informa
                       tion
  126 00000026 4614            MOV              R4, R2
  127 00000028         ; it is not possible to a multiplication by 10 with left
                       -shifting in one step
  128 00000028         ; first we have multiply by 2 -> R4 * 2^1
  129 00000028 0064            LSLS             R4, #1
  130 0000002A         
  131 0000002A         ; the sum of different multiplication is the same as mul
                       tiply it in one step



ARM Macro Assembler    Page 4 


  132 0000002A         ; we have already multiply by 2, so the multiply by 8 is
                        left
  133 0000002A         ; multiply by 8 -> R4 * 2^3(=8)
  134 0000002A 00E4            LSLS             R4, #3
  135 0000002C         
  136 0000002C         ; add the one-value to the multiplied value
  137 0000002C 1864            ADDS             R4, R1
  138 0000002E         
  139 0000002E         ; go to red_lcd-branch
  140 0000002E E006            B                red_light
  141 00000030         
  142 00000030         
  143 00000030         
  144 00000030         blue_light
  145 00000030         ; Load address of Backlight_off in R7 -> brightness = 0%
                       
  146 00000030 4F1F            LDR              R7, =LCD_BACKLIGHT_OFF
  147 00000032         
  148 00000032         ; load address of red-color
  149 00000032 4E20            LDR              R6, =ADDR_LCD_RED
  150 00000034         
  151 00000034         ; turn off the light
  152 00000034 8037            STRH             R7, [R6]
  153 00000036         
  154 00000036         ; now the backlight is off, so we can turn it on with th
                       e color blue
  155 00000036         ; load address of backlight_full in R7 -> brightness = 1
                       00%
  156 00000036 4F20            LDR              R7, =LCD_BACKLIGHT_FULL
  157 00000038         ; load address of blue-color
  158 00000038 4E20            LDR              R6, =ADDR_LCD_BLUE
  159 0000003A         ; set the red value to the backlight -> turn on the red 
                       light
  160 0000003A 8037            STRH             R7, [R6]
  161 0000003C         
  162 0000003C         ; go to show_result-branch
  163 0000003C E006            B                result
  164 0000003E         
  165 0000003E         
  166 0000003E         red_light
  167 0000003E         ; first we have to be sure, that the blue color is turne
                       d off -> everything is set to 0
  168 0000003E         ; Load address of Backlight_off in R7 -> brightness = 0%
                       
  169 0000003E 4F1C            LDR              R7, =LCD_BACKLIGHT_OFF
  170 00000040         
  171 00000040         ; load address of blue-color
  172 00000040 4E1E            LDR              R6, =ADDR_LCD_BLUE
  173 00000042         
  174 00000042         ; turn off the light
  175 00000042 8037            STRH             R7, [R6]
  176 00000044         
  177 00000044         ; now the backlight is off, so we can turn it on with th
                       e color red
  178 00000044         ; load address of backlight_full in R7 -> brightness = 1
                       00%
  179 00000044 4F1C            LDR              R7, =LCD_BACKLIGHT_FULL
  180 00000046         ; load address of red-color
  181 00000046 4E1B            LDR              R6, =ADDR_LCD_RED



ARM Macro Assembler    Page 5 


  182 00000048         ; set the red value to the backlight -> turn on the red 
                       light
  183 00000048 8037            STRH             R7, [R6]
  184 0000004A         
  185 0000004A         ; go to show_result-branch
  186 0000004A E7FF            B                result
  187 0000004C         
  188 0000004C         
  189 0000004C         
  190 0000004C         result
  191 0000004C         ; --- display value on LEDs ---
  192 0000004C         
  193 0000004C         ; load address of LED 0-15 in R7
  194 0000004C 4F1C            LDR              R7, =ADDR_LED_15_0
  195 0000004E         ; BCD value is in R3
  196 0000004E         ; multiplied value is in R4
  197 0000004E         
  198 0000004E         ; copy value from R4 in R0, that we can combine the valu
                       e
  199 0000004E 4620            MOV              R0, R4
  200 00000050         ; left shifiting by 8 that we can combine it later with 
                       R3
  201 00000050 0200            LSLS             R0, #8
  202 00000052         
  203 00000052         ; combine the value
  204 00000052 18C0            ADDS             R0, R0, R3
  205 00000054         
  206 00000054         ; store value (R0) to LEDs (R7)
  207 00000054 7038            STRB             R0, [R7]
  208 00000056         
  209 00000056         ; --- display value on 7 segment ---
  210 00000056         ; load address of 7 segment
  211 00000056 4F1B            LDR              R7, =ADDR_7_SEG_BIN_DS3_0
  212 00000058         
  213 00000058 4620            MOV              R0, R4
  214 0000005A         ; shift multiplied-value from R4 with 8 bits
  215 0000005A         ; with the left-shifting of 8 bits, we make sure, that t
                       his will be displayed in the upper to 7 segments
  216 0000005A 0200            LSLS             R0, #8
  217 0000005C         
  218 0000005C         ; now we can combined the new value from R4 with the BCD
                       -value (R3)
  219 0000005C         ; this is the way to show in the upper 2 the multiplied 
                       value and in the lower to the BCD value
  220 0000005C 18C0            ADDS             R0, R0, R3
  221 0000005E         
  222 0000005E         ; now we can store the new value from R4 (Halfword) (MUL
                       S|MULS|BCD|BCD) to the 7 segment
  223 0000005E 8038            STRH             R0, [R7]
  224 00000060         
  225 00000060         ; ********************
  226 00000060         ; ***** TASK 3.2 *****  --> nicht vollends verstanden
  227 00000060         ; ********************
  228 00000060         
  229 00000060         ; BCD ones at R1
  230 00000060         ; BCD tens at R2
  231 00000060         ; BCD combined at R3
  232 00000060         ; make sure that the new register is empty -> set to 0
  233 00000060 4813            LDR              R0, =0



ARM Macro Assembler    Page 6 


  234 00000062         
  235 00000062         bar
  236 00000062         ; from WIKIPEDIA: if we execute a rotate left through ca
                       rry instruction, the result would be 10101011 with the c
                       arry flag cleared 
  237 00000062         ; because the most significant bit (bit 7) was rotated i
                       nto the carry while the carry was rotated into the least
                        significant bit (bit 0).
  238 00000062         ; -> we can right shift the result of R4
  239 00000062 0864            LSRS             R4, #1      ; 
  240 00000064         
  241 00000064         ; if the carry flag is set, we know that we have to add 
                       a bit to the very beginning (right) 
  242 00000064         ; BCS -> Branch if carry is set
  243 00000064 D201            BCS              add_one_right
  244 00000066         
  245 00000066         ; if the zero flag is set, we can go into the disco-mode
                       
  246 00000066         ; BEQ -> Branch if Equal -> if zero flag is set
  247 00000066 D003            BEQ              crazy_disco_mode
  248 00000068         
  249 00000068         ; if neither the carry nor the zero flag is set, 
  250 00000068         ; we have to do another round in the bar loop
  251 00000068 E7FB            B                bar
  252 0000006A         
  253 0000006A         
  254 0000006A         add_one_right
  255 0000006A         ; we have to shift the current result one to the left
  256 0000006A 0040            LSLS             R0, #1
  257 0000006C         ; add one to the bar
  258 0000006C 3001            ADDS             R0, #1
  259 0000006E         
  260 0000006E E7F8            B                bar
  261 00000070         
  262 00000070         crazy_disco_mode
  263 00000070         ; copy value from the bar (R0) to a new register (R1)
  264 00000070 4601            MOV              R1, R0
  265 00000072         
  266 00000072         ; left shift a halfword -> as mentioned in pdf 
  267 00000072 0409            LSLS             R1, R1, #16
  268 00000074         
  269 00000074         ; to get a word (what is needed for the rotation) we can
                        combined R1 and R0
  270 00000074         ; we will get a duplicated halfword
  271 00000074 4308            ORRS             R0, R0, R1
  272 00000076         
  273 00000076         ; --- LED 16 - 31 ----
  274 00000076         ; load address of LED 16 - 31
  275 00000076 4F14            LDR              R7, =ADDR_LED_31_16
  276 00000078         
  277 00000078         ; Loop one times for all 16 bits of halfword  -> whaaaat
                       ?
  278 00000078 4D14            LDR              R5, =16
  279 0000007A         
  280 0000007A         ; bitcounter for rotation R0 -> How big is the step by r
                       otation
  281 0000007A 490A            LDR              R1, =1
  282 0000007C         
  283 0000007C         crazy_rotation



ARM Macro Assembler    Page 7 


  284 0000007C         ; store the barvalue (R0) on LEDs 16 - 31 (R7)
  285 0000007C 8038            STRH             R0, [R7]
  286 0000007E         
  287 0000007E         ; Rotate Right -> ROR
  288 0000007E         ; This instruction is a preferred synonym for MOV instru
                       ctions with shifted register operands.
  289 0000007E         ; S is an optional suffix. If S is specified, the condit
                       ion flags are updated on the result of the operation.
  290 0000007E 41C8            RORS             R0, R0, R1
  291 00000080         
  292 00000080         ; BL -> Branch with Link
  293 00000080         ; The BL instruction causes a branch to label, and copie
                       s the address of the next instruction into LR (R14, the 
                       link register).
  294 00000080 F7FF FFFE       BL               pause
  295 00000084         
  296 00000084         ; decrement the loop variable
  297 00000084         ; if R5 is 0 -> zeroflag will be 1
  298 00000084 3D01            SUBS             R5, #1
  299 00000086         
  300 00000086         ; if the loop counter (R5) is not 0 (-> Z == 0), the loo
                       p will be continued
  301 00000086         ; BNE -> If branch is not equal
  302 00000086 D1F9            BNE              crazy_rotation
  303 00000088         
  304 00000088         
  305 00000088         ; END: To be programmed
  306 00000088         
  307 00000088 E7FE            B                main
  308 0000008A                 ENDP
  309 0000008A         
  310 0000008A         ;----------------------------------------------------
  311 0000008A         ; Subroutines
  312 0000008A         ;----------------------------------------------------
  313 0000008A         
  314 0000008A         ;----------------------------------------------------
  315 0000008A         ; pause for disco_lights
  316 0000008A         pause   PROC
  317 0000008A B403            PUSH             {R0, R1}
  318 0000008C 4905            LDR              R1, =1
  319 0000008E 4810            LDR              R0, =0x000FFFFF
  320 00000090         
  321 00000090         loop
  322 00000090 1A40            SUBS             R0, R0, R1
  323 00000092 D2FD            BCS              loop
  324 00000094         
  325 00000094 BC03            POP              {R0, R1}
  326 00000096 4770            BX               LR
  327 00000098                 ALIGN
  328 00000098                 ENDP
  329 00000098         
  330 00000098         ; ------------------------------------------------------
                       ------------
  331 00000098         ; End of code
  332 00000098         ; ------------------------------------------------------
                       ------------
  333 00000098                 END
              0000000F 
              60000200 



ARM Macro Assembler    Page 8 


              60000201 
              00000001 
              60000210 
              0000000A 
              00000000 
              60000340 
              0000FFFF 
              60000344 
              60000100 
              60000114 
              60000102 
              00000010 
              000FFFFF 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=interw
ork --depend=.\build\main.d -o.\build\main.o -I.\RTE\_Target_1 -IC:\Keil_v5\ARM
\PACK\InES\CTBoard14_DFP\4.0.2\Device\Include -IC:\Keil_v5\ARM\PACK\InES\CTBoar
d14_DFP\4.0.2\Device\Include\m0 -IC:\Keil_v5\ARM\PACK\InES\CTBoard14_DFP\4.0.2\
HAL\Include -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predef
ine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" --list=.\build\main
.lst app\main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

add_one_right 0000006A

Symbol: add_one_right
   Definitions
      At line 254 in file app\main.s
   Uses
      At line 243 in file app\main.s
Comment: add_one_right used once
bar 00000062

Symbol: bar
   Definitions
      At line 235 in file app\main.s
   Uses
      At line 251 in file app\main.s
      At line 260 in file app\main.s

blue_light 00000030

Symbol: blue_light
   Definitions
      At line 144 in file app\main.s
   Uses
      At line 121 in file app\main.s
Comment: blue_light used once
crazy_disco_mode 00000070

Symbol: crazy_disco_mode
   Definitions
      At line 262 in file app\main.s
   Uses
      At line 247 in file app\main.s
Comment: crazy_disco_mode used once
crazy_rotation 0000007C

Symbol: crazy_rotation
   Definitions
      At line 283 in file app\main.s
   Uses
      At line 302 in file app\main.s
Comment: crazy_rotation used once
loop 00000090

Symbol: loop
   Definitions
      At line 321 in file app\main.s
   Uses
      At line 323 in file app\main.s
Comment: loop used once
main 00000000

Symbol: main
   Definitions
      At line 46 in file app\main.s
   Uses
      At line 47 in file app\main.s
      At line 307 in file app\main.s

myCode 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: myCode
   Definitions
      At line 42 in file app\main.s
   Uses
      None
Comment: myCode unused
pause 0000008A

Symbol: pause
   Definitions
      At line 316 in file app\main.s
   Uses
      At line 294 in file app\main.s
Comment: pause used once
red_light 0000003E

Symbol: red_light
   Definitions
      At line 166 in file app\main.s
   Uses
      At line 140 in file app\main.s
Comment: red_light used once
result 0000004C

Symbol: result
   Definitions
      At line 190 in file app\main.s
   Uses
      At line 163 in file app\main.s
      At line 186 in file app\main.s

shifting 00000026

Symbol: shifting
   Definitions
      At line 124 in file app\main.s
   Uses
      At line 110 in file app\main.s
Comment: shifting used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADDR_7_SEG_BIN_DS3_0 60000114

Symbol: ADDR_7_SEG_BIN_DS3_0
   Definitions
      At line 28 in file app\main.s
   Uses
      At line 211 in file app\main.s
Comment: ADDR_7_SEG_BIN_DS3_0 used once
ADDR_BUTTONS 60000210

Symbol: ADDR_BUTTONS
   Definitions
      At line 29 in file app\main.s
   Uses
      At line 100 in file app\main.s
Comment: ADDR_BUTTONS used once
ADDR_DIP_SWITCH_15_8 60000201

Symbol: ADDR_DIP_SWITCH_15_8
   Definitions
      At line 27 in file app\main.s
   Uses
      At line 79 in file app\main.s
Comment: ADDR_DIP_SWITCH_15_8 used once
ADDR_DIP_SWITCH_7_0 60000200

Symbol: ADDR_DIP_SWITCH_7_0
   Definitions
      At line 26 in file app\main.s
   Uses
      At line 70 in file app\main.s
Comment: ADDR_DIP_SWITCH_7_0 used once
ADDR_LCD_BLUE 60000344

Symbol: ADDR_LCD_BLUE
   Definitions
      At line 33 in file app\main.s
   Uses
      At line 158 in file app\main.s
      At line 172 in file app\main.s

ADDR_LCD_GREEN 60000342

Symbol: ADDR_LCD_GREEN
   Definitions
      At line 32 in file app\main.s
   Uses
      None
Comment: ADDR_LCD_GREEN unused
ADDR_LCD_RED 60000340

Symbol: ADDR_LCD_RED
   Definitions
      At line 31 in file app\main.s
   Uses
      At line 149 in file app\main.s
      At line 181 in file app\main.s

ADDR_LED_15_0 60000100



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols


Symbol: ADDR_LED_15_0
   Definitions
      At line 24 in file app\main.s
   Uses
      At line 194 in file app\main.s
Comment: ADDR_LED_15_0 used once
ADDR_LED_31_16 60000102

Symbol: ADDR_LED_31_16
   Definitions
      At line 25 in file app\main.s
   Uses
      At line 275 in file app\main.s
Comment: ADDR_LED_31_16 used once
BITMASK_LASTBIT 00000001

Symbol: BITMASK_LASTBIT
   Definitions
      At line 38 in file app\main.s
   Uses
      At line 96 in file app\main.s
Comment: BITMASK_LASTBIT used once
BITMASK_LOWER_4 0000000F

Symbol: BITMASK_LOWER_4
   Definitions
      At line 37 in file app\main.s
   Uses
      At line 65 in file app\main.s
Comment: BITMASK_LOWER_4 used once
LCD_BACKLIGHT_FULL 0000FFFF

Symbol: LCD_BACKLIGHT_FULL
   Definitions
      At line 34 in file app\main.s
   Uses
      At line 156 in file app\main.s
      At line 179 in file app\main.s

LCD_BACKLIGHT_OFF 00000000

Symbol: LCD_BACKLIGHT_OFF
   Definitions
      At line 35 in file app\main.s
   Uses
      At line 146 in file app\main.s
      At line 169 in file app\main.s

13 symbols
360 symbols in table
